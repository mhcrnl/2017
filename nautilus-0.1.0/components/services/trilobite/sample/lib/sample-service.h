/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef sample_service_H
#define sample_service_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#include <bonobo/Bonobo.h>
#if !defined(ORBIT_DECL_Trilobite_Eazel_Sample) && !defined(_Trilobite_Eazel_Sample_defined)
#define ORBIT_DECL_Trilobite_Eazel_Sample 1
#define _Trilobite_Eazel_Sample_defined 1
#define Trilobite_Eazel_Sample__free CORBA_Object__free
   typedef CORBA_Object Trilobite_Eazel_Sample;
   extern CORBA_unsigned_long Trilobite_Eazel_Sample__classid;
#if !defined(TC_IMPL_TC_Trilobite_Eazel_Sample_0)
#define TC_IMPL_TC_Trilobite_Eazel_Sample_0 's'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_1 'a'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_2 'm'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_3 'p'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_4 'l'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_5 'e'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_6 '_'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_7 's'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_8 'e'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_9 'r'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_10 'v'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_11 'i'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_12 'c'
#define TC_IMPL_TC_Trilobite_Eazel_Sample_13 'e'
   extern const struct CORBA_TypeCode_struct TC_Trilobite_Eazel_Sample_struct;
#define TC_Trilobite_Eazel_Sample ((CORBA_TypeCode)&TC_Trilobite_Eazel_Sample_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*remember) (PortableServer_Servant _servant,
			const CORBA_char * something, CORBA_Environment * ev);
      void (*say_it) (PortableServer_Servant _servant,
		      CORBA_Environment * ev);
      void (*list_it) (PortableServer_Servant _servant,
		       const CORBA_char * dir, CORBA_Environment * ev);
   }
   POA_Trilobite_Eazel_Sample__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Trilobite_Eazel_Sample__epv *Trilobite_Eazel_Sample_epv;
   }
   POA_Trilobite_Eazel_Sample__vepv;
   typedef struct
   {
      void *_private;
      POA_Trilobite_Eazel_Sample__vepv *vepv;
   }
   POA_Trilobite_Eazel_Sample;
   extern void POA_Trilobite_Eazel_Sample__init(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
   extern void POA_Trilobite_Eazel_Sample__fini(PortableServer_Servant
						servant,
						CORBA_Environment * ev);

/** prototypes **/
#define Trilobite_Eazel_Sample_ref Bonobo_Unknown_ref
#define Trilobite_Eazel_Sample_unref Bonobo_Unknown_unref
#define Trilobite_Eazel_Sample_query_interface Bonobo_Unknown_query_interface
   void Trilobite_Eazel_Sample_remember(Trilobite_Eazel_Sample _obj,
					const CORBA_char * something,
					CORBA_Environment * ev);
   void Trilobite_Eazel_Sample_say_it(Trilobite_Eazel_Sample _obj,
				      CORBA_Environment * ev);
   void Trilobite_Eazel_Sample_list_it(Trilobite_Eazel_Sample _obj,
				       const CORBA_char * dir,
				       CORBA_Environment * ev);

   void _ORBIT_skel_Trilobite_Eazel_Sample_remember(POA_Trilobite_Eazel_Sample
						    * _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void (*_impl_remember)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_char *
						     something,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Trilobite_Eazel_Sample_say_it(POA_Trilobite_Eazel_Sample *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_say_it)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Trilobite_Eazel_Sample_list_it(POA_Trilobite_Eazel_Sample
						   * _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void (*_impl_list_it)
						   (PortableServer_Servant
						    _servant,
						    const CORBA_char * dir,
						    CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
