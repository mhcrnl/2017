/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef nautilus_shell_interface_H
#define nautilus_shell_interface_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#include <bonobo/Bonobo.h>
#if !defined(_Nautilus_URI_defined)
#define _Nautilus_URI_defined 1
   typedef CORBA_char *Nautilus_URI;
#if !defined(TC_IMPL_TC_Nautilus_URI_0)
#define TC_IMPL_TC_Nautilus_URI_0 'n'
#define TC_IMPL_TC_Nautilus_URI_1 'a'
#define TC_IMPL_TC_Nautilus_URI_2 'u'
#define TC_IMPL_TC_Nautilus_URI_3 't'
#define TC_IMPL_TC_Nautilus_URI_4 'i'
#define TC_IMPL_TC_Nautilus_URI_5 'l'
#define TC_IMPL_TC_Nautilus_URI_6 'u'
#define TC_IMPL_TC_Nautilus_URI_7 's'
#define TC_IMPL_TC_Nautilus_URI_8 '_'
#define TC_IMPL_TC_Nautilus_URI_9 's'
#define TC_IMPL_TC_Nautilus_URI_10 'h'
#define TC_IMPL_TC_Nautilus_URI_11 'e'
#define TC_IMPL_TC_Nautilus_URI_12 'l'
#define TC_IMPL_TC_Nautilus_URI_13 'l'
#define TC_IMPL_TC_Nautilus_URI_14 '_'
#define TC_IMPL_TC_Nautilus_URI_15 'i'
#define TC_IMPL_TC_Nautilus_URI_16 'n'
#define TC_IMPL_TC_Nautilus_URI_17 't'
#define TC_IMPL_TC_Nautilus_URI_18 'e'
#define TC_IMPL_TC_Nautilus_URI_19 'r'
#define TC_IMPL_TC_Nautilus_URI_20 'f'
#define TC_IMPL_TC_Nautilus_URI_21 'a'
#define TC_IMPL_TC_Nautilus_URI_22 'c'
#define TC_IMPL_TC_Nautilus_URI_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_URI_struct;
#define TC_Nautilus_URI ((CORBA_TypeCode)&TC_Nautilus_URI_struct)
#endif
#define Nautilus_URI__free CORBA_string__free
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Nautilus_URI) && !defined(_CORBA_sequence_Nautilus_URI_defined)
#define ORBIT_DECL_CORBA_sequence_Nautilus_URI 1
#define _CORBA_sequence_Nautilus_URI_defined 1
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_0 'n'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_1 'a'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_2 'u'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_3 't'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_4 'i'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_5 'l'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_6 'u'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_7 's'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_8 '_'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_9 's'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_10 'h'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_11 'e'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_12 'l'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_13 'l'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_14 '_'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_15 'i'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_16 'n'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_17 't'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_18 'e'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_19 'r'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_20 'f'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_21 'a'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_22 'c'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_URI_23 'e'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Nautilus_URI *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Nautilus_URI;
#if !defined(TC_IMPL_TC_CORBA_sequence_Nautilus_URI_0)
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_0 'n'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_1 'a'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_2 'u'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_3 't'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_4 'i'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_5 'l'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_6 'u'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_7 's'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_8 '_'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_9 's'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_10 'h'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_11 'e'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_12 'l'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_13 'l'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_14 '_'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_15 'i'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_16 'n'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_17 't'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_18 'e'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_19 'r'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_20 'f'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_21 'a'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_22 'c'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_URI_23 'e'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Nautilus_URI_struct;
#define TC_CORBA_sequence_Nautilus_URI ((CORBA_TypeCode)&TC_CORBA_sequence_Nautilus_URI_struct)
#endif
   extern CORBA_sequence_Nautilus_URI
      *CORBA_sequence_Nautilus_URI__alloc(void);
   extern gpointer CORBA_sequence_Nautilus_URI__free(gpointer mem,
						     gpointer dat,
						     CORBA_boolean free_strings);	/* ORBit internal use */
   Nautilus_URI *CORBA_sequence_Nautilus_URI_allocbuf(CORBA_unsigned_long
						      len);
#endif
#if !defined(_Nautilus_URIList_defined)
#define _Nautilus_URIList_defined 1
   typedef CORBA_sequence_Nautilus_URI Nautilus_URIList;
#if !defined(TC_IMPL_TC_Nautilus_URIList_0)
#define TC_IMPL_TC_Nautilus_URIList_0 'n'
#define TC_IMPL_TC_Nautilus_URIList_1 'a'
#define TC_IMPL_TC_Nautilus_URIList_2 'u'
#define TC_IMPL_TC_Nautilus_URIList_3 't'
#define TC_IMPL_TC_Nautilus_URIList_4 'i'
#define TC_IMPL_TC_Nautilus_URIList_5 'l'
#define TC_IMPL_TC_Nautilus_URIList_6 'u'
#define TC_IMPL_TC_Nautilus_URIList_7 's'
#define TC_IMPL_TC_Nautilus_URIList_8 '_'
#define TC_IMPL_TC_Nautilus_URIList_9 's'
#define TC_IMPL_TC_Nautilus_URIList_10 'h'
#define TC_IMPL_TC_Nautilus_URIList_11 'e'
#define TC_IMPL_TC_Nautilus_URIList_12 'l'
#define TC_IMPL_TC_Nautilus_URIList_13 'l'
#define TC_IMPL_TC_Nautilus_URIList_14 '_'
#define TC_IMPL_TC_Nautilus_URIList_15 'i'
#define TC_IMPL_TC_Nautilus_URIList_16 'n'
#define TC_IMPL_TC_Nautilus_URIList_17 't'
#define TC_IMPL_TC_Nautilus_URIList_18 'e'
#define TC_IMPL_TC_Nautilus_URIList_19 'r'
#define TC_IMPL_TC_Nautilus_URIList_20 'f'
#define TC_IMPL_TC_Nautilus_URIList_21 'a'
#define TC_IMPL_TC_Nautilus_URIList_22 'c'
#define TC_IMPL_TC_Nautilus_URIList_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_URIList_struct;
#define TC_Nautilus_URIList ((CORBA_TypeCode)&TC_Nautilus_URIList_struct)
#endif
   extern Nautilus_URIList *Nautilus_URIList__alloc(void);
   extern gpointer Nautilus_URIList__free(gpointer mem, gpointer dat,
					  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Nautilus_View) && !defined(_Nautilus_View_defined)
#define ORBIT_DECL_Nautilus_View 1
#define _Nautilus_View_defined 1
#define Nautilus_View__free CORBA_Object__free
   typedef CORBA_Object Nautilus_View;
   extern CORBA_unsigned_long Nautilus_View__classid;
#if !defined(TC_IMPL_TC_Nautilus_View_0)
#define TC_IMPL_TC_Nautilus_View_0 'n'
#define TC_IMPL_TC_Nautilus_View_1 'a'
#define TC_IMPL_TC_Nautilus_View_2 'u'
#define TC_IMPL_TC_Nautilus_View_3 't'
#define TC_IMPL_TC_Nautilus_View_4 'i'
#define TC_IMPL_TC_Nautilus_View_5 'l'
#define TC_IMPL_TC_Nautilus_View_6 'u'
#define TC_IMPL_TC_Nautilus_View_7 's'
#define TC_IMPL_TC_Nautilus_View_8 '_'
#define TC_IMPL_TC_Nautilus_View_9 's'
#define TC_IMPL_TC_Nautilus_View_10 'h'
#define TC_IMPL_TC_Nautilus_View_11 'e'
#define TC_IMPL_TC_Nautilus_View_12 'l'
#define TC_IMPL_TC_Nautilus_View_13 'l'
#define TC_IMPL_TC_Nautilus_View_14 '_'
#define TC_IMPL_TC_Nautilus_View_15 'i'
#define TC_IMPL_TC_Nautilus_View_16 'n'
#define TC_IMPL_TC_Nautilus_View_17 't'
#define TC_IMPL_TC_Nautilus_View_18 'e'
#define TC_IMPL_TC_Nautilus_View_19 'r'
#define TC_IMPL_TC_Nautilus_View_20 'f'
#define TC_IMPL_TC_Nautilus_View_21 'a'
#define TC_IMPL_TC_Nautilus_View_22 'c'
#define TC_IMPL_TC_Nautilus_View_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_View_struct;
#define TC_Nautilus_View ((CORBA_TypeCode)&TC_Nautilus_View_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Nautilus_ViewFrame) && !defined(_Nautilus_ViewFrame_defined)
#define ORBIT_DECL_Nautilus_ViewFrame 1
#define _Nautilus_ViewFrame_defined 1
#define Nautilus_ViewFrame__free CORBA_Object__free
   typedef CORBA_Object Nautilus_ViewFrame;
   extern CORBA_unsigned_long Nautilus_ViewFrame__classid;
#if !defined(TC_IMPL_TC_Nautilus_ViewFrame_0)
#define TC_IMPL_TC_Nautilus_ViewFrame_0 'n'
#define TC_IMPL_TC_Nautilus_ViewFrame_1 'a'
#define TC_IMPL_TC_Nautilus_ViewFrame_2 'u'
#define TC_IMPL_TC_Nautilus_ViewFrame_3 't'
#define TC_IMPL_TC_Nautilus_ViewFrame_4 'i'
#define TC_IMPL_TC_Nautilus_ViewFrame_5 'l'
#define TC_IMPL_TC_Nautilus_ViewFrame_6 'u'
#define TC_IMPL_TC_Nautilus_ViewFrame_7 's'
#define TC_IMPL_TC_Nautilus_ViewFrame_8 '_'
#define TC_IMPL_TC_Nautilus_ViewFrame_9 's'
#define TC_IMPL_TC_Nautilus_ViewFrame_10 'h'
#define TC_IMPL_TC_Nautilus_ViewFrame_11 'e'
#define TC_IMPL_TC_Nautilus_ViewFrame_12 'l'
#define TC_IMPL_TC_Nautilus_ViewFrame_13 'l'
#define TC_IMPL_TC_Nautilus_ViewFrame_14 '_'
#define TC_IMPL_TC_Nautilus_ViewFrame_15 'i'
#define TC_IMPL_TC_Nautilus_ViewFrame_16 'n'
#define TC_IMPL_TC_Nautilus_ViewFrame_17 't'
#define TC_IMPL_TC_Nautilus_ViewFrame_18 'e'
#define TC_IMPL_TC_Nautilus_ViewFrame_19 'r'
#define TC_IMPL_TC_Nautilus_ViewFrame_20 'f'
#define TC_IMPL_TC_Nautilus_ViewFrame_21 'a'
#define TC_IMPL_TC_Nautilus_ViewFrame_22 'c'
#define TC_IMPL_TC_Nautilus_ViewFrame_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_ViewFrame_struct;
#define TC_Nautilus_ViewFrame ((CORBA_TypeCode)&TC_Nautilus_ViewFrame_struct)
#endif
#endif
#if !defined(_Nautilus_ZoomLevel_defined)
#define _Nautilus_ZoomLevel_defined 1
   typedef CORBA_double Nautilus_ZoomLevel;
#if !defined(TC_IMPL_TC_Nautilus_ZoomLevel_0)
#define TC_IMPL_TC_Nautilus_ZoomLevel_0 'n'
#define TC_IMPL_TC_Nautilus_ZoomLevel_1 'a'
#define TC_IMPL_TC_Nautilus_ZoomLevel_2 'u'
#define TC_IMPL_TC_Nautilus_ZoomLevel_3 't'
#define TC_IMPL_TC_Nautilus_ZoomLevel_4 'i'
#define TC_IMPL_TC_Nautilus_ZoomLevel_5 'l'
#define TC_IMPL_TC_Nautilus_ZoomLevel_6 'u'
#define TC_IMPL_TC_Nautilus_ZoomLevel_7 's'
#define TC_IMPL_TC_Nautilus_ZoomLevel_8 '_'
#define TC_IMPL_TC_Nautilus_ZoomLevel_9 's'
#define TC_IMPL_TC_Nautilus_ZoomLevel_10 'h'
#define TC_IMPL_TC_Nautilus_ZoomLevel_11 'e'
#define TC_IMPL_TC_Nautilus_ZoomLevel_12 'l'
#define TC_IMPL_TC_Nautilus_ZoomLevel_13 'l'
#define TC_IMPL_TC_Nautilus_ZoomLevel_14 '_'
#define TC_IMPL_TC_Nautilus_ZoomLevel_15 'i'
#define TC_IMPL_TC_Nautilus_ZoomLevel_16 'n'
#define TC_IMPL_TC_Nautilus_ZoomLevel_17 't'
#define TC_IMPL_TC_Nautilus_ZoomLevel_18 'e'
#define TC_IMPL_TC_Nautilus_ZoomLevel_19 'r'
#define TC_IMPL_TC_Nautilus_ZoomLevel_20 'f'
#define TC_IMPL_TC_Nautilus_ZoomLevel_21 'a'
#define TC_IMPL_TC_Nautilus_ZoomLevel_22 'c'
#define TC_IMPL_TC_Nautilus_ZoomLevel_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_ZoomLevel_struct;
#define TC_Nautilus_ZoomLevel ((CORBA_TypeCode)&TC_Nautilus_ZoomLevel_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Nautilus_ZoomLevel) && !defined(_CORBA_sequence_Nautilus_ZoomLevel_defined)
#define ORBIT_DECL_CORBA_sequence_Nautilus_ZoomLevel 1
#define _CORBA_sequence_Nautilus_ZoomLevel_defined 1
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_0 'n'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_1 'a'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_2 'u'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_3 't'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_4 'i'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_5 'l'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_6 'u'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_7 's'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_8 '_'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_9 's'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_10 'h'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_11 'e'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_12 'l'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_13 'l'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_14 '_'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_15 'i'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_16 'n'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_17 't'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_18 'e'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_19 'r'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_20 'f'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_21 'a'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_22 'c'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_ZoomLevel_23 'e'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Nautilus_ZoomLevel *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Nautilus_ZoomLevel;
#if !defined(TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_0)
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_0 'n'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_1 'a'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_2 'u'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_3 't'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_4 'i'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_5 'l'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_6 'u'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_7 's'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_8 '_'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_9 's'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_10 'h'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_11 'e'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_12 'l'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_13 'l'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_14 '_'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_15 'i'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_16 'n'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_17 't'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_18 'e'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_19 'r'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_20 'f'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_21 'a'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_22 'c'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_ZoomLevel_23 'e'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Nautilus_ZoomLevel_struct;
#define TC_CORBA_sequence_Nautilus_ZoomLevel ((CORBA_TypeCode)&TC_CORBA_sequence_Nautilus_ZoomLevel_struct)
#endif
   extern CORBA_sequence_Nautilus_ZoomLevel
      *CORBA_sequence_Nautilus_ZoomLevel__alloc(void);
   extern gpointer CORBA_sequence_Nautilus_ZoomLevel__free(gpointer mem,
							   gpointer dat,
							   CORBA_boolean free_strings);	/* ORBit internal use */
   Nautilus_ZoomLevel
      *CORBA_sequence_Nautilus_ZoomLevel_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Nautilus_ZoomLevelList_defined)
#define _Nautilus_ZoomLevelList_defined 1
   typedef CORBA_sequence_Nautilus_ZoomLevel Nautilus_ZoomLevelList;
#if !defined(TC_IMPL_TC_Nautilus_ZoomLevelList_0)
#define TC_IMPL_TC_Nautilus_ZoomLevelList_0 'n'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_1 'a'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_2 'u'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_3 't'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_4 'i'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_5 'l'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_6 'u'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_7 's'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_8 '_'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_9 's'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_10 'h'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_11 'e'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_12 'l'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_13 'l'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_14 '_'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_15 'i'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_16 'n'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_17 't'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_18 'e'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_19 'r'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_20 'f'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_21 'a'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_22 'c'
#define TC_IMPL_TC_Nautilus_ZoomLevelList_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_ZoomLevelList_struct;
#define TC_Nautilus_ZoomLevelList ((CORBA_TypeCode)&TC_Nautilus_ZoomLevelList_struct)
#endif
   extern Nautilus_ZoomLevelList *Nautilus_ZoomLevelList__alloc(void);
   extern gpointer Nautilus_ZoomLevelList__free(gpointer mem, gpointer dat,
						CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Nautilus_Zoomable) && !defined(_Nautilus_Zoomable_defined)
#define ORBIT_DECL_Nautilus_Zoomable 1
#define _Nautilus_Zoomable_defined 1
#define Nautilus_Zoomable__free CORBA_Object__free
   typedef CORBA_Object Nautilus_Zoomable;
   extern CORBA_unsigned_long Nautilus_Zoomable__classid;
#if !defined(TC_IMPL_TC_Nautilus_Zoomable_0)
#define TC_IMPL_TC_Nautilus_Zoomable_0 'n'
#define TC_IMPL_TC_Nautilus_Zoomable_1 'a'
#define TC_IMPL_TC_Nautilus_Zoomable_2 'u'
#define TC_IMPL_TC_Nautilus_Zoomable_3 't'
#define TC_IMPL_TC_Nautilus_Zoomable_4 'i'
#define TC_IMPL_TC_Nautilus_Zoomable_5 'l'
#define TC_IMPL_TC_Nautilus_Zoomable_6 'u'
#define TC_IMPL_TC_Nautilus_Zoomable_7 's'
#define TC_IMPL_TC_Nautilus_Zoomable_8 '_'
#define TC_IMPL_TC_Nautilus_Zoomable_9 's'
#define TC_IMPL_TC_Nautilus_Zoomable_10 'h'
#define TC_IMPL_TC_Nautilus_Zoomable_11 'e'
#define TC_IMPL_TC_Nautilus_Zoomable_12 'l'
#define TC_IMPL_TC_Nautilus_Zoomable_13 'l'
#define TC_IMPL_TC_Nautilus_Zoomable_14 '_'
#define TC_IMPL_TC_Nautilus_Zoomable_15 'i'
#define TC_IMPL_TC_Nautilus_Zoomable_16 'n'
#define TC_IMPL_TC_Nautilus_Zoomable_17 't'
#define TC_IMPL_TC_Nautilus_Zoomable_18 'e'
#define TC_IMPL_TC_Nautilus_Zoomable_19 'r'
#define TC_IMPL_TC_Nautilus_Zoomable_20 'f'
#define TC_IMPL_TC_Nautilus_Zoomable_21 'a'
#define TC_IMPL_TC_Nautilus_Zoomable_22 'c'
#define TC_IMPL_TC_Nautilus_Zoomable_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_Zoomable_struct;
#define TC_Nautilus_Zoomable ((CORBA_TypeCode)&TC_Nautilus_Zoomable_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Nautilus_ZoomableFrame) && !defined(_Nautilus_ZoomableFrame_defined)
#define ORBIT_DECL_Nautilus_ZoomableFrame 1
#define _Nautilus_ZoomableFrame_defined 1
#define Nautilus_ZoomableFrame__free CORBA_Object__free
   typedef CORBA_Object Nautilus_ZoomableFrame;
   extern CORBA_unsigned_long Nautilus_ZoomableFrame__classid;
#if !defined(TC_IMPL_TC_Nautilus_ZoomableFrame_0)
#define TC_IMPL_TC_Nautilus_ZoomableFrame_0 'n'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_1 'a'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_2 'u'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_3 't'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_4 'i'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_5 'l'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_6 'u'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_7 's'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_8 '_'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_9 's'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_10 'h'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_11 'e'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_12 'l'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_13 'l'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_14 '_'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_15 'i'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_16 'n'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_17 't'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_18 'e'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_19 'r'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_20 'f'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_21 'a'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_22 'c'
#define TC_IMPL_TC_Nautilus_ZoomableFrame_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_ZoomableFrame_struct;
#define TC_Nautilus_ZoomableFrame ((CORBA_TypeCode)&TC_Nautilus_ZoomableFrame_struct)
#endif
#endif
#if !defined(_Nautilus_HistoryItem_defined)
#define _Nautilus_HistoryItem_defined 1
   typedef struct
   {
      CORBA_char *title;
      Nautilus_URI location;
   }
   Nautilus_HistoryItem;

#if !defined(TC_IMPL_TC_Nautilus_HistoryItem_0)
#define TC_IMPL_TC_Nautilus_HistoryItem_0 'n'
#define TC_IMPL_TC_Nautilus_HistoryItem_1 'a'
#define TC_IMPL_TC_Nautilus_HistoryItem_2 'u'
#define TC_IMPL_TC_Nautilus_HistoryItem_3 't'
#define TC_IMPL_TC_Nautilus_HistoryItem_4 'i'
#define TC_IMPL_TC_Nautilus_HistoryItem_5 'l'
#define TC_IMPL_TC_Nautilus_HistoryItem_6 'u'
#define TC_IMPL_TC_Nautilus_HistoryItem_7 's'
#define TC_IMPL_TC_Nautilus_HistoryItem_8 '_'
#define TC_IMPL_TC_Nautilus_HistoryItem_9 's'
#define TC_IMPL_TC_Nautilus_HistoryItem_10 'h'
#define TC_IMPL_TC_Nautilus_HistoryItem_11 'e'
#define TC_IMPL_TC_Nautilus_HistoryItem_12 'l'
#define TC_IMPL_TC_Nautilus_HistoryItem_13 'l'
#define TC_IMPL_TC_Nautilus_HistoryItem_14 '_'
#define TC_IMPL_TC_Nautilus_HistoryItem_15 'i'
#define TC_IMPL_TC_Nautilus_HistoryItem_16 'n'
#define TC_IMPL_TC_Nautilus_HistoryItem_17 't'
#define TC_IMPL_TC_Nautilus_HistoryItem_18 'e'
#define TC_IMPL_TC_Nautilus_HistoryItem_19 'r'
#define TC_IMPL_TC_Nautilus_HistoryItem_20 'f'
#define TC_IMPL_TC_Nautilus_HistoryItem_21 'a'
#define TC_IMPL_TC_Nautilus_HistoryItem_22 'c'
#define TC_IMPL_TC_Nautilus_HistoryItem_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_HistoryItem_struct;
#define TC_Nautilus_HistoryItem ((CORBA_TypeCode)&TC_Nautilus_HistoryItem_struct)
#endif
   extern Nautilus_HistoryItem *Nautilus_HistoryItem__alloc(void);
   extern gpointer Nautilus_HistoryItem__free(gpointer mem, gpointer dat,
					      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Nautilus_HistoryItem) && !defined(_CORBA_sequence_Nautilus_HistoryItem_defined)
#define ORBIT_DECL_CORBA_sequence_Nautilus_HistoryItem 1
#define _CORBA_sequence_Nautilus_HistoryItem_defined 1
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_0 'n'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_1 'a'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_2 'u'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_3 't'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_4 'i'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_5 'l'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_6 'u'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_7 's'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_8 '_'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_9 's'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_10 'h'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_11 'e'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_12 'l'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_13 'l'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_14 '_'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_15 'i'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_16 'n'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_17 't'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_18 'e'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_19 'r'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_20 'f'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_21 'a'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_22 'c'
#define ORBIT_IMPL_CORBA_sequence_Nautilus_HistoryItem_23 'e'
   typedef struct
   {
      CORBA_unsigned_long _maximum,
       _length;
      Nautilus_HistoryItem *_buffer;
      CORBA_boolean _release;
   }
   CORBA_sequence_Nautilus_HistoryItem;
#if !defined(TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_0)
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_0 'n'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_1 'a'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_2 'u'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_3 't'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_4 'i'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_5 'l'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_6 'u'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_7 's'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_8 '_'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_9 's'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_10 'h'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_11 'e'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_12 'l'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_13 'l'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_14 '_'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_15 'i'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_16 'n'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_17 't'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_18 'e'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_19 'r'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_20 'f'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_21 'a'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_22 'c'
#define TC_IMPL_TC_CORBA_sequence_Nautilus_HistoryItem_23 'e'
   extern const struct CORBA_TypeCode_struct
      TC_CORBA_sequence_Nautilus_HistoryItem_struct;
#define TC_CORBA_sequence_Nautilus_HistoryItem ((CORBA_TypeCode)&TC_CORBA_sequence_Nautilus_HistoryItem_struct)
#endif
   extern CORBA_sequence_Nautilus_HistoryItem
      *CORBA_sequence_Nautilus_HistoryItem__alloc(void);
   extern gpointer CORBA_sequence_Nautilus_HistoryItem__free(gpointer mem,
							     gpointer dat,
							     CORBA_boolean free_strings);	/* ORBit internal use */
   Nautilus_HistoryItem
      *CORBA_sequence_Nautilus_HistoryItem_allocbuf(CORBA_unsigned_long len);
#endif
#if !defined(_Nautilus_HistoryList_defined)
#define _Nautilus_HistoryList_defined 1
   typedef CORBA_sequence_Nautilus_HistoryItem Nautilus_HistoryList;
#if !defined(TC_IMPL_TC_Nautilus_HistoryList_0)
#define TC_IMPL_TC_Nautilus_HistoryList_0 'n'
#define TC_IMPL_TC_Nautilus_HistoryList_1 'a'
#define TC_IMPL_TC_Nautilus_HistoryList_2 'u'
#define TC_IMPL_TC_Nautilus_HistoryList_3 't'
#define TC_IMPL_TC_Nautilus_HistoryList_4 'i'
#define TC_IMPL_TC_Nautilus_HistoryList_5 'l'
#define TC_IMPL_TC_Nautilus_HistoryList_6 'u'
#define TC_IMPL_TC_Nautilus_HistoryList_7 's'
#define TC_IMPL_TC_Nautilus_HistoryList_8 '_'
#define TC_IMPL_TC_Nautilus_HistoryList_9 's'
#define TC_IMPL_TC_Nautilus_HistoryList_10 'h'
#define TC_IMPL_TC_Nautilus_HistoryList_11 'e'
#define TC_IMPL_TC_Nautilus_HistoryList_12 'l'
#define TC_IMPL_TC_Nautilus_HistoryList_13 'l'
#define TC_IMPL_TC_Nautilus_HistoryList_14 '_'
#define TC_IMPL_TC_Nautilus_HistoryList_15 'i'
#define TC_IMPL_TC_Nautilus_HistoryList_16 'n'
#define TC_IMPL_TC_Nautilus_HistoryList_17 't'
#define TC_IMPL_TC_Nautilus_HistoryList_18 'e'
#define TC_IMPL_TC_Nautilus_HistoryList_19 'r'
#define TC_IMPL_TC_Nautilus_HistoryList_20 'f'
#define TC_IMPL_TC_Nautilus_HistoryList_21 'a'
#define TC_IMPL_TC_Nautilus_HistoryList_22 'c'
#define TC_IMPL_TC_Nautilus_HistoryList_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_HistoryList_struct;
#define TC_Nautilus_HistoryList ((CORBA_TypeCode)&TC_Nautilus_HistoryList_struct)
#endif
   extern Nautilus_HistoryList *Nautilus_HistoryList__alloc(void);
   extern gpointer Nautilus_HistoryList__free(gpointer mem, gpointer dat,
					      CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(_Nautilus_History_defined)
#define _Nautilus_History_defined 1
   typedef struct
   {
      Nautilus_HistoryList list;
      CORBA_long position;
   }
   Nautilus_History;

#if !defined(TC_IMPL_TC_Nautilus_History_0)
#define TC_IMPL_TC_Nautilus_History_0 'n'
#define TC_IMPL_TC_Nautilus_History_1 'a'
#define TC_IMPL_TC_Nautilus_History_2 'u'
#define TC_IMPL_TC_Nautilus_History_3 't'
#define TC_IMPL_TC_Nautilus_History_4 'i'
#define TC_IMPL_TC_Nautilus_History_5 'l'
#define TC_IMPL_TC_Nautilus_History_6 'u'
#define TC_IMPL_TC_Nautilus_History_7 's'
#define TC_IMPL_TC_Nautilus_History_8 '_'
#define TC_IMPL_TC_Nautilus_History_9 's'
#define TC_IMPL_TC_Nautilus_History_10 'h'
#define TC_IMPL_TC_Nautilus_History_11 'e'
#define TC_IMPL_TC_Nautilus_History_12 'l'
#define TC_IMPL_TC_Nautilus_History_13 'l'
#define TC_IMPL_TC_Nautilus_History_14 '_'
#define TC_IMPL_TC_Nautilus_History_15 'i'
#define TC_IMPL_TC_Nautilus_History_16 'n'
#define TC_IMPL_TC_Nautilus_History_17 't'
#define TC_IMPL_TC_Nautilus_History_18 'e'
#define TC_IMPL_TC_Nautilus_History_19 'r'
#define TC_IMPL_TC_Nautilus_History_20 'f'
#define TC_IMPL_TC_Nautilus_History_21 'a'
#define TC_IMPL_TC_Nautilus_History_22 'c'
#define TC_IMPL_TC_Nautilus_History_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_History_struct;
#define TC_Nautilus_History ((CORBA_TypeCode)&TC_Nautilus_History_struct)
#endif
   extern Nautilus_History *Nautilus_History__alloc(void);
   extern gpointer Nautilus_History__free(gpointer mem, gpointer dat,
					  CORBA_boolean free_strings);	/* ORBit internal use */
#endif
#if !defined(ORBIT_DECL_Nautilus_HistoryFrame) && !defined(_Nautilus_HistoryFrame_defined)
#define ORBIT_DECL_Nautilus_HistoryFrame 1
#define _Nautilus_HistoryFrame_defined 1
#define Nautilus_HistoryFrame__free CORBA_Object__free
   typedef CORBA_Object Nautilus_HistoryFrame;
   extern CORBA_unsigned_long Nautilus_HistoryFrame__classid;
#if !defined(TC_IMPL_TC_Nautilus_HistoryFrame_0)
#define TC_IMPL_TC_Nautilus_HistoryFrame_0 'n'
#define TC_IMPL_TC_Nautilus_HistoryFrame_1 'a'
#define TC_IMPL_TC_Nautilus_HistoryFrame_2 'u'
#define TC_IMPL_TC_Nautilus_HistoryFrame_3 't'
#define TC_IMPL_TC_Nautilus_HistoryFrame_4 'i'
#define TC_IMPL_TC_Nautilus_HistoryFrame_5 'l'
#define TC_IMPL_TC_Nautilus_HistoryFrame_6 'u'
#define TC_IMPL_TC_Nautilus_HistoryFrame_7 's'
#define TC_IMPL_TC_Nautilus_HistoryFrame_8 '_'
#define TC_IMPL_TC_Nautilus_HistoryFrame_9 's'
#define TC_IMPL_TC_Nautilus_HistoryFrame_10 'h'
#define TC_IMPL_TC_Nautilus_HistoryFrame_11 'e'
#define TC_IMPL_TC_Nautilus_HistoryFrame_12 'l'
#define TC_IMPL_TC_Nautilus_HistoryFrame_13 'l'
#define TC_IMPL_TC_Nautilus_HistoryFrame_14 '_'
#define TC_IMPL_TC_Nautilus_HistoryFrame_15 'i'
#define TC_IMPL_TC_Nautilus_HistoryFrame_16 'n'
#define TC_IMPL_TC_Nautilus_HistoryFrame_17 't'
#define TC_IMPL_TC_Nautilus_HistoryFrame_18 'e'
#define TC_IMPL_TC_Nautilus_HistoryFrame_19 'r'
#define TC_IMPL_TC_Nautilus_HistoryFrame_20 'f'
#define TC_IMPL_TC_Nautilus_HistoryFrame_21 'a'
#define TC_IMPL_TC_Nautilus_HistoryFrame_22 'c'
#define TC_IMPL_TC_Nautilus_HistoryFrame_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_HistoryFrame_struct;
#define TC_Nautilus_HistoryFrame ((CORBA_TypeCode)&TC_Nautilus_HistoryFrame_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Nautilus_Shell) && !defined(_Nautilus_Shell_defined)
#define ORBIT_DECL_Nautilus_Shell 1
#define _Nautilus_Shell_defined 1
#define Nautilus_Shell__free CORBA_Object__free
   typedef CORBA_Object Nautilus_Shell;
   extern CORBA_unsigned_long Nautilus_Shell__classid;
#if !defined(TC_IMPL_TC_Nautilus_Shell_0)
#define TC_IMPL_TC_Nautilus_Shell_0 'n'
#define TC_IMPL_TC_Nautilus_Shell_1 'a'
#define TC_IMPL_TC_Nautilus_Shell_2 'u'
#define TC_IMPL_TC_Nautilus_Shell_3 't'
#define TC_IMPL_TC_Nautilus_Shell_4 'i'
#define TC_IMPL_TC_Nautilus_Shell_5 'l'
#define TC_IMPL_TC_Nautilus_Shell_6 'u'
#define TC_IMPL_TC_Nautilus_Shell_7 's'
#define TC_IMPL_TC_Nautilus_Shell_8 '_'
#define TC_IMPL_TC_Nautilus_Shell_9 's'
#define TC_IMPL_TC_Nautilus_Shell_10 'h'
#define TC_IMPL_TC_Nautilus_Shell_11 'e'
#define TC_IMPL_TC_Nautilus_Shell_12 'l'
#define TC_IMPL_TC_Nautilus_Shell_13 'l'
#define TC_IMPL_TC_Nautilus_Shell_14 '_'
#define TC_IMPL_TC_Nautilus_Shell_15 'i'
#define TC_IMPL_TC_Nautilus_Shell_16 'n'
#define TC_IMPL_TC_Nautilus_Shell_17 't'
#define TC_IMPL_TC_Nautilus_Shell_18 'e'
#define TC_IMPL_TC_Nautilus_Shell_19 'r'
#define TC_IMPL_TC_Nautilus_Shell_20 'f'
#define TC_IMPL_TC_Nautilus_Shell_21 'a'
#define TC_IMPL_TC_Nautilus_Shell_22 'c'
#define TC_IMPL_TC_Nautilus_Shell_23 'e'
   extern const struct CORBA_TypeCode_struct TC_Nautilus_Shell_struct;
#define TC_Nautilus_Shell ((CORBA_TypeCode)&TC_Nautilus_Shell_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*load_location) (PortableServer_Servant _servant,
			     const Nautilus_URI location,
			     CORBA_Environment * ev);
      void (*stop_loading) (PortableServer_Servant _servant,
			    CORBA_Environment * ev);
      void (*selection_changed) (PortableServer_Servant _servant,
				 const Nautilus_URIList * selection,
				 CORBA_Environment * ev);
   }
   POA_Nautilus_View__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Nautilus_View__epv *Nautilus_View_epv;
   }
   POA_Nautilus_View__vepv;
   typedef struct
   {
      void *_private;
      POA_Nautilus_View__vepv *vepv;
   }
   POA_Nautilus_View;
   extern void POA_Nautilus_View__init(PortableServer_Servant servant,
				       CORBA_Environment * ev);
   extern void POA_Nautilus_View__fini(PortableServer_Servant servant,
				       CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*open_location) (PortableServer_Servant _servant,
			     const Nautilus_URI location,
			     CORBA_Environment * ev);
      void (*open_location_in_new_window) (PortableServer_Servant _servant,
					   const Nautilus_URI location,
					   CORBA_Environment * ev);
      void (*report_location_change) (PortableServer_Servant _servant,
				      const Nautilus_URI location,
				      CORBA_Environment * ev);
      void (*report_selection_change) (PortableServer_Servant _servant,
				       const Nautilus_URIList * selection,
				       CORBA_Environment * ev);
      void (*report_status) (PortableServer_Servant _servant,
			     const CORBA_char * status,
			     CORBA_Environment * ev);
      void (*report_load_underway) (PortableServer_Servant _servant,
				    CORBA_Environment * ev);
      void (*report_load_progress) (PortableServer_Servant _servant,
				    const CORBA_double fraction_done,
				    CORBA_Environment * ev);
      void (*report_load_complete) (PortableServer_Servant _servant,
				    CORBA_Environment * ev);
      void (*report_load_failed) (PortableServer_Servant _servant,
				  CORBA_Environment * ev);
      void (*set_title) (PortableServer_Servant _servant,
			 const CORBA_char * new_title,
			 CORBA_Environment * ev);
   }
   POA_Nautilus_ViewFrame__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Nautilus_ViewFrame__epv *Nautilus_ViewFrame_epv;
   }
   POA_Nautilus_ViewFrame__vepv;
   typedef struct
   {
      void *_private;
      POA_Nautilus_ViewFrame__vepv *vepv;
   }
   POA_Nautilus_ViewFrame;
   extern void POA_Nautilus_ViewFrame__init(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   extern void POA_Nautilus_ViewFrame__fini(PortableServer_Servant servant,
					    CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      
	 CORBA_double(*_get_zoom_level) (PortableServer_Servant _servant,
					 CORBA_Environment * ev);
      void (*_set_zoom_level) (PortableServer_Servant _servant,
			       const CORBA_double value,
			       CORBA_Environment * ev);
       CORBA_double(*_get_min_zoom_level) (PortableServer_Servant _servant,
					   CORBA_Environment * ev);
       CORBA_double(*_get_max_zoom_level) (PortableServer_Servant _servant,
					   CORBA_Environment * ev);
       CORBA_boolean(*_get_is_continuous) (PortableServer_Servant _servant,
					   CORBA_Environment * ev);
      Nautilus_ZoomLevelList
	 *(*_get_preferred_zoom_levels) (PortableServer_Servant _servant,
					 CORBA_Environment * ev);
      void (*zoom_in) (PortableServer_Servant _servant,
		       CORBA_Environment * ev);
      void (*zoom_out) (PortableServer_Servant _servant,
			CORBA_Environment * ev);
      void (*zoom_to_fit) (PortableServer_Servant _servant,
			   CORBA_Environment * ev);
   }
   POA_Nautilus_Zoomable__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Nautilus_Zoomable__epv *Nautilus_Zoomable_epv;
   }
   POA_Nautilus_Zoomable__vepv;
   typedef struct
   {
      void *_private;
      POA_Nautilus_Zoomable__vepv *vepv;
   }
   POA_Nautilus_Zoomable;
   extern void POA_Nautilus_Zoomable__init(PortableServer_Servant servant,
					   CORBA_Environment * ev);
   extern void POA_Nautilus_Zoomable__fini(PortableServer_Servant servant,
					   CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*report_zoom_level_changed) (PortableServer_Servant _servant,
					 const CORBA_double zoom_level,
					 CORBA_Environment * ev);
   }
   POA_Nautilus_ZoomableFrame__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Nautilus_ZoomableFrame__epv *Nautilus_ZoomableFrame_epv;
   }
   POA_Nautilus_ZoomableFrame__vepv;
   typedef struct
   {
      void *_private;
      POA_Nautilus_ZoomableFrame__vepv *vepv;
   }
   POA_Nautilus_ZoomableFrame;
   extern void POA_Nautilus_ZoomableFrame__init(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
   extern void POA_Nautilus_ZoomableFrame__fini(PortableServer_Servant
						servant,
						CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      Nautilus_History *(*get_history_list) (PortableServer_Servant _servant,
					     CORBA_Environment * ev);
   }
   POA_Nautilus_HistoryFrame__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Nautilus_HistoryFrame__epv *Nautilus_HistoryFrame_epv;
   }
   POA_Nautilus_HistoryFrame__vepv;
   typedef struct
   {
      void *_private;
      POA_Nautilus_HistoryFrame__vepv *vepv;
   }
   POA_Nautilus_HistoryFrame;
   extern void POA_Nautilus_HistoryFrame__init(PortableServer_Servant servant,
					       CORBA_Environment * ev);
   extern void POA_Nautilus_HistoryFrame__fini(PortableServer_Servant servant,
					       CORBA_Environment * ev);
   typedef struct
   {
      void *_private;
      void (*open_windows) (PortableServer_Servant _servant,
			    const Nautilus_URIList * uris,
			    CORBA_Environment * ev);
      void (*open_default_window) (PortableServer_Servant _servant,
				   CORBA_Environment * ev);
      void (*start_desktop) (PortableServer_Servant _servant,
			     CORBA_Environment * ev);
      void (*stop_desktop) (PortableServer_Servant _servant,
			    CORBA_Environment * ev);
      void (*quit) (PortableServer_Servant _servant, CORBA_Environment * ev);
   }
   POA_Nautilus_Shell__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Nautilus_Shell__epv *Nautilus_Shell_epv;
   }
   POA_Nautilus_Shell__vepv;
   typedef struct
   {
      void *_private;
      POA_Nautilus_Shell__vepv *vepv;
   }
   POA_Nautilus_Shell;
   extern void POA_Nautilus_Shell__init(PortableServer_Servant servant,
					CORBA_Environment * ev);
   extern void POA_Nautilus_Shell__fini(PortableServer_Servant servant,
					CORBA_Environment * ev);

/** prototypes **/
#define Nautilus_View_ref Bonobo_Unknown_ref
#define Nautilus_View_unref Bonobo_Unknown_unref
#define Nautilus_View_query_interface Bonobo_Unknown_query_interface
   void Nautilus_View_load_location(Nautilus_View _obj,
				    const Nautilus_URI location,
				    CORBA_Environment * ev);
   void Nautilus_View_stop_loading(Nautilus_View _obj,
				   CORBA_Environment * ev);
   void Nautilus_View_selection_changed(Nautilus_View _obj,
					const Nautilus_URIList * selection,
					CORBA_Environment * ev);
#define Nautilus_ViewFrame_ref Bonobo_Unknown_ref
#define Nautilus_ViewFrame_unref Bonobo_Unknown_unref
#define Nautilus_ViewFrame_query_interface Bonobo_Unknown_query_interface
   void Nautilus_ViewFrame_open_location(Nautilus_ViewFrame _obj,
					 const Nautilus_URI location,
					 CORBA_Environment * ev);
   void Nautilus_ViewFrame_open_location_in_new_window(Nautilus_ViewFrame
						       _obj,
						       const Nautilus_URI
						       location,
						       CORBA_Environment *
						       ev);
   void Nautilus_ViewFrame_report_location_change(Nautilus_ViewFrame _obj,
						  const Nautilus_URI location,
						  CORBA_Environment * ev);
   void Nautilus_ViewFrame_report_selection_change(Nautilus_ViewFrame _obj,
						   const Nautilus_URIList *
						   selection,
						   CORBA_Environment * ev);
   void Nautilus_ViewFrame_report_status(Nautilus_ViewFrame _obj,
					 const CORBA_char * status,
					 CORBA_Environment * ev);
   void Nautilus_ViewFrame_report_load_underway(Nautilus_ViewFrame _obj,
						CORBA_Environment * ev);
   void Nautilus_ViewFrame_report_load_progress(Nautilus_ViewFrame _obj,
						const CORBA_double
						fraction_done,
						CORBA_Environment * ev);
   void Nautilus_ViewFrame_report_load_complete(Nautilus_ViewFrame _obj,
						CORBA_Environment * ev);
   void Nautilus_ViewFrame_report_load_failed(Nautilus_ViewFrame _obj,
					      CORBA_Environment * ev);
   void Nautilus_ViewFrame_set_title(Nautilus_ViewFrame _obj,
				     const CORBA_char * new_title,
				     CORBA_Environment * ev);
#define Nautilus_Zoomable_ref Bonobo_Unknown_ref
#define Nautilus_Zoomable_unref Bonobo_Unknown_unref
#define Nautilus_Zoomable_query_interface Bonobo_Unknown_query_interface
   CORBA_double Nautilus_Zoomable__get_zoom_level(Nautilus_Zoomable _obj,
						  CORBA_Environment * ev);
   void Nautilus_Zoomable__set_zoom_level(Nautilus_Zoomable _obj,
					  const CORBA_double value,
					  CORBA_Environment * ev);
   CORBA_double Nautilus_Zoomable__get_min_zoom_level(Nautilus_Zoomable _obj,
						      CORBA_Environment * ev);
   CORBA_double Nautilus_Zoomable__get_max_zoom_level(Nautilus_Zoomable _obj,
						      CORBA_Environment * ev);
   CORBA_boolean Nautilus_Zoomable__get_is_continuous(Nautilus_Zoomable _obj,
						      CORBA_Environment * ev);
   Nautilus_ZoomLevelList
      *Nautilus_Zoomable__get_preferred_zoom_levels(Nautilus_Zoomable _obj,
						    CORBA_Environment * ev);
   void Nautilus_Zoomable_zoom_in(Nautilus_Zoomable _obj,
				  CORBA_Environment * ev);
   void Nautilus_Zoomable_zoom_out(Nautilus_Zoomable _obj,
				   CORBA_Environment * ev);
   void Nautilus_Zoomable_zoom_to_fit(Nautilus_Zoomable _obj,
				      CORBA_Environment * ev);
#define Nautilus_ZoomableFrame_ref Bonobo_Unknown_ref
#define Nautilus_ZoomableFrame_unref Bonobo_Unknown_unref
#define Nautilus_ZoomableFrame_query_interface Bonobo_Unknown_query_interface
   void
      Nautilus_ZoomableFrame_report_zoom_level_changed(Nautilus_ZoomableFrame
						       _obj,
						       const CORBA_double
						       zoom_level,
						       CORBA_Environment *
						       ev);
#define Nautilus_HistoryFrame_ref Bonobo_Unknown_ref
#define Nautilus_HistoryFrame_unref Bonobo_Unknown_unref
#define Nautilus_HistoryFrame_query_interface Bonobo_Unknown_query_interface
   Nautilus_History
      *Nautilus_HistoryFrame_get_history_list(Nautilus_HistoryFrame _obj,
					      CORBA_Environment * ev);
#define Nautilus_Shell_ref Bonobo_Unknown_ref
#define Nautilus_Shell_unref Bonobo_Unknown_unref
#define Nautilus_Shell_query_interface Bonobo_Unknown_query_interface
   void Nautilus_Shell_open_windows(Nautilus_Shell _obj,
				    const Nautilus_URIList * uris,
				    CORBA_Environment * ev);
   void Nautilus_Shell_open_default_window(Nautilus_Shell _obj,
					   CORBA_Environment * ev);
   void Nautilus_Shell_start_desktop(Nautilus_Shell _obj,
				     CORBA_Environment * ev);
   void Nautilus_Shell_stop_desktop(Nautilus_Shell _obj,
				    CORBA_Environment * ev);
   void Nautilus_Shell_quit(Nautilus_Shell _obj, CORBA_Environment * ev);

   void _ORBIT_skel_Nautilus_View_load_location(POA_Nautilus_View *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_load_location)
						(PortableServer_Servant
						 _servant,
						 const Nautilus_URI location,
						 CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_View_stop_loading(POA_Nautilus_View *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_stop_loading)
					       (PortableServer_Servant
						_servant,
						CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_View_selection_changed(POA_Nautilus_View *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void
						    (*_impl_selection_changed)
						    (PortableServer_Servant
						     _servant,
						     const Nautilus_URIList *
						     selection,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_ViewFrame_open_location(POA_Nautilus_ViewFrame *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     void
						     (*_impl_open_location)
						     (PortableServer_Servant
						      _servant,
						      const Nautilus_URI
						      location,
						      CORBA_Environment *
						      ev));
   void
      _ORBIT_skel_Nautilus_ViewFrame_open_location_in_new_window
      (POA_Nautilus_ViewFrame * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_open_location_in_new_window) (PortableServer_Servant
						  _servant,
						  const Nautilus_URI location,
						  CORBA_Environment * ev));
   void
      _ORBIT_skel_Nautilus_ViewFrame_report_location_change
      (POA_Nautilus_ViewFrame * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_report_location_change) (PortableServer_Servant _servant,
					     const Nautilus_URI location,
					     CORBA_Environment * ev));
   void
      _ORBIT_skel_Nautilus_ViewFrame_report_selection_change
      (POA_Nautilus_ViewFrame * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_report_selection_change) (PortableServer_Servant _servant,
					      const Nautilus_URIList *
					      selection,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_ViewFrame_report_status(POA_Nautilus_ViewFrame *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     void
						     (*_impl_report_status)
						     (PortableServer_Servant
						      _servant,
						      const CORBA_char *
						      status,
						      CORBA_Environment *
						      ev));
   void
      _ORBIT_skel_Nautilus_ViewFrame_report_load_underway
      (POA_Nautilus_ViewFrame * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_report_load_underway) (PortableServer_Servant _servant,
					   CORBA_Environment * ev));
   void
      _ORBIT_skel_Nautilus_ViewFrame_report_load_progress
      (POA_Nautilus_ViewFrame * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_report_load_progress) (PortableServer_Servant _servant,
					   const CORBA_double fraction_done,
					   CORBA_Environment * ev));
   void
      _ORBIT_skel_Nautilus_ViewFrame_report_load_complete
      (POA_Nautilus_ViewFrame * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_report_load_complete) (PortableServer_Servant _servant,
					   CORBA_Environment * ev));
   void
      _ORBIT_skel_Nautilus_ViewFrame_report_load_failed(POA_Nautilus_ViewFrame
							* _ORBIT_servant,
							GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev,
							void
							(*_impl_report_load_failed)
							(PortableServer_Servant
							 _servant,
							 CORBA_Environment *
							 ev));
   void _ORBIT_skel_Nautilus_ViewFrame_set_title(POA_Nautilus_ViewFrame *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_set_title)
						 (PortableServer_Servant
						  _servant,
						  const CORBA_char *
						  new_title,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_Zoomable__get_zoom_level(POA_Nautilus_Zoomable *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      CORBA_double
						      (*_impl__get_zoom_level)
						      (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_Nautilus_Zoomable__set_zoom_level(POA_Nautilus_Zoomable *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      void
						      (*_impl__set_zoom_level)
						      (PortableServer_Servant
						       _servant,
						       const CORBA_double
						       value,
						       CORBA_Environment *
						       ev));
   void
      _ORBIT_skel_Nautilus_Zoomable__get_min_zoom_level(POA_Nautilus_Zoomable
							* _ORBIT_servant,
							GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev,
							CORBA_double
							(*_impl__get_min_zoom_level)
							(PortableServer_Servant
							 _servant,
							 CORBA_Environment *
							 ev));
   void
      _ORBIT_skel_Nautilus_Zoomable__get_max_zoom_level(POA_Nautilus_Zoomable
							* _ORBIT_servant,
							GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev,
							CORBA_double
							(*_impl__get_max_zoom_level)
							(PortableServer_Servant
							 _servant,
							 CORBA_Environment *
							 ev));
   void _ORBIT_skel_Nautilus_Zoomable__get_is_continuous(POA_Nautilus_Zoomable
							 * _ORBIT_servant,
							 GIOPRecvBuffer *
							 _ORBIT_recv_buffer,
							 CORBA_Environment *
							 ev,
							 CORBA_boolean
							 (*_impl__get_is_continuous)
							 (PortableServer_Servant
							  _servant,
							  CORBA_Environment *
							  ev));
   void
      _ORBIT_skel_Nautilus_Zoomable__get_preferred_zoom_levels
      (POA_Nautilus_Zoomable * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       Nautilus_ZoomLevelList *
       (*_impl__get_preferred_zoom_levels) (PortableServer_Servant _servant,
					    CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_Zoomable_zoom_in(POA_Nautilus_Zoomable *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl_zoom_in)
					      (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_Zoomable_zoom_out(POA_Nautilus_Zoomable *
					       _ORBIT_servant,
					       GIOPRecvBuffer *
					       _ORBIT_recv_buffer,
					       CORBA_Environment * ev,
					       void (*_impl_zoom_out)
					       (PortableServer_Servant
						_servant,
						CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_Zoomable_zoom_to_fit(POA_Nautilus_Zoomable *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl_zoom_to_fit)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void
      _ORBIT_skel_Nautilus_ZoomableFrame_report_zoom_level_changed
      (POA_Nautilus_ZoomableFrame * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       void (*_impl_report_zoom_level_changed) (PortableServer_Servant
						_servant,
						const CORBA_double zoom_level,
						CORBA_Environment * ev));
   void
      _ORBIT_skel_Nautilus_HistoryFrame_get_history_list
      (POA_Nautilus_HistoryFrame * _ORBIT_servant,
       GIOPRecvBuffer * _ORBIT_recv_buffer, CORBA_Environment * ev,
       Nautilus_History *
       (*_impl_get_history_list) (PortableServer_Servant _servant,
				  CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_Shell_open_windows(POA_Nautilus_Shell *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_open_windows)
						(PortableServer_Servant
						 _servant,
						 const Nautilus_URIList *
						 uris,
						 CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_Shell_open_default_window(POA_Nautilus_Shell *
						       _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       void
						       (*_impl_open_default_window)
						       (PortableServer_Servant
							_servant,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_Nautilus_Shell_start_desktop(POA_Nautilus_Shell *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_start_desktop)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_Shell_stop_desktop(POA_Nautilus_Shell *
						_ORBIT_servant,
						GIOPRecvBuffer *
						_ORBIT_recv_buffer,
						CORBA_Environment * ev,
						void (*_impl_stop_desktop)
						(PortableServer_Servant
						 _servant,
						 CORBA_Environment * ev));
   void _ORBIT_skel_Nautilus_Shell_quit(POA_Nautilus_Shell * _ORBIT_servant,
					GIOPRecvBuffer * _ORBIT_recv_buffer,
					CORBA_Environment * ev,
					void (*_impl_quit)
					(PortableServer_Servant _servant,
					 CORBA_Environment * ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
